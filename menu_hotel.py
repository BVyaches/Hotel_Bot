import requests
import telebot
from telebot import types
from translate import Translator

config = '1812941909:AAEHziQZ8GHHJEXImg2re_-wLqrLQlG1dEo'

bot = telebot.TeleBot(config)


def hello_menu(id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton('–Ø –ø–æ—Å—Ç–æ—è–ª–µ—Üüè†', callback_data='USER'),
        types.InlineKeyboardButton('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—åüè¢',
                                   url='https://www.booking.com'),
        types.InlineKeyboardButton('–û–± –æ—Ç–µ–ª–µüìñ ', callback_data='ABOUT'),
        types.InlineKeyboardButton('–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—èüöï',
                                   url='https://yandex.ru/maps/org/litsey_4/1111858881'),
        types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å ID', callback_data='GET_ID'),
    )
    params = {
        'text': '*–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?*',
        'reply_markup': keyboard,
        "parse_mode": 'MarkDownV2'
    }

    bot.send_message(**params, chat_id=id)


def main_menu(call):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton('–£—Å–ª—É–≥–∏üìÉ', callback_data='SERVICE'),
        types.InlineKeyboardButton('–ü—Ä–æ—á–µ–µ‚ûï', callback_data='OTHER'),
        types.InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤‚úèÔ∏è', callback_data='REVIEW'),
        types.InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–ºüì±',
                                   callback_data='ADMIN'),
        types.InlineKeyboardButton('–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—èüöï',
                                   url='https://yandex.ru/maps/org/litsey_4/1111858881'),
        types.InlineKeyboardButton('–í—ã—Ö–æ–¥', callback_data='HELLO')
    )
    params = {
        'text': '*–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?*',
        'reply_markup': keyboard,
        "parse_mode": 'MarkDownV2'
    }
    if isinstance(call, types.CallbackQuery):
        bot.edit_message_text(**params, chat_id=call.from_user.id,
                              message_id=call.message.id)
    else:
        bot.send_message(**params, chat_id=call.from_user.id)


def service_menu(call):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton('–£–±–æ—Ä–∫–∞üßπ', callback_data='CLEAN'),
        types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞—Ä–∞üßÉ', callback_data='BAR'),
        types.InlineKeyboardButton('–¢—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ªüèãÔ∏è‚Äç‚ôÇÔ∏è',
                                   callback_data='GYM'),
        types.InlineKeyboardButton('–ù–∞–∑–∞–¥üîô', callback_data='MENU')
    )
    params = {
        'text': '*–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É*',
        'reply_markup': keyboard,
        "parse_mode": 'MarkDownV2'
    }

    if isinstance(call, types.CallbackQuery):
        bot.edit_message_text(**params, chat_id=call.from_user.id,
                              message_id=call.message.id)
    else:
        bot.send_message(**params, chat_id=call.from_user.id)


def review_menu(call):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton('–í—Å–µ –∫–ª–∞—Å—Å–Ω–æ!', callback_data='COOL'),
        types.InlineKeyboardButton('–ú–æ–∂–Ω–æ –ª—É—á—à–µ', callback_data='BAD'),
    )
    params = {
        'text': '*–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å*',
        'reply_markup': keyboard,
        "parse_mode": 'MarkDownV2'
    }

    if isinstance(call, types.CallbackQuery):
        bot.edit_message_text(**params, chat_id=call.from_user.id,
                              message_id=call.message.id)
    else:
        bot.send_message(**params, chat_id=call.from_user.id)


def others_menu(call):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞üå•', callback_data='WEATH'),
        types.InlineKeyboardButton('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µüîÆ', callback_data='PREDICT'),
        types.InlineKeyboardButton('–®—É—Ç–∫–∞üéâ', callback_data='JOKE'),
        types.InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—èüìú',
                                   callback_data='RULES'),
        types.InlineKeyboardButton('–ù–∞–∑–∞–¥üîô', callback_data='MENU'),
    )

    params = {
        'text': '*–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?*',
        'reply_markup': keyboard,
        "parse_mode": 'MarkDownV2'
    }

    if isinstance(call, types.CallbackQuery):
        bot.edit_message_text(**params, chat_id=call.from_user.id,
                              message_id=call.message.id)
    else:
        bot.send_message(**params, chat_id=call.from_user.id)


def back_menu(id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton('–ù–∞–∑–∞–¥üîô', callback_data='MENU')
    )

    params = {
        'text': '–í–µ—Ä–Ω—É—Ç—å—Å—è?',
        'reply_markup': keyboard,
        "parse_mode": 'MarkDownV2'
    }

    bot.send_message(**params, chat_id=id)


def cleaning_order(call):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton('–ë—ã—Å—Ç—Ä–∞—è —É–±–æ—Ä–∫–∞',
                                   callback_data='FAST_CLEAN'),
        types.InlineKeyboardButton('–¢—â–∞—Ç–µ–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞',
                                   callback_data='DEEP_CLEAN'),
        types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='SERVICE')
    )

    params = {
        'text': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏',
        'reply_markup': keyboard,
        'parse_mode': 'MarkDownV2'
    }

    bot.send_message(**params, chat_id=call.from_user.id)


def cleaning_final(call, option):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton('–î–∞',
                                   callback_data=f'{option}_YES'),
        types.InlineKeyboardButton('–ù–µ—Ç', callback_data='SERVICE')
    )
    params = {
        'text': '–ó–∞–∫–∞–∑—ã–≤–∞–µ–º?',
        'reply_markup': keyboard,
        'parse_mode': 'MarkDownV2'
    }

    bot.send_message(**params, chat_id=call.from_user.id)

def what_weather(city):
    search = {
        '0': '',
        'T': '',
        'M': '',
    }
    requests_headers = {
        'Accept-Language': 'ru'
    }
    translator = Translator(from_lang="ru", to_lang="en")
    url = ("https://wttr.in/" + translator.translate(city))
    try:
        response = requests.get(url, params=search, headers=requests_headers)
        if response.status_code == 200:
            result = response.text
            print(result)
            return result
        else:
            return "–æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"

    except requests.ConnectionError:
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'
